/**
 * Rutas para {{resourceNameUpper}}
 */
import { Router, Request, Response, NextFunction } from 'express';
import { {{resourceNameUpper}}Controller } from './{{resourceNameUpper}}Controller';
import validateZodSchema from '@core/middleware/validateZodSchema';
import { Create{{resourceNameUpper}}Schema, Update{{resourceNameUpper}}Schema } from './{{resourceNameUpper}}Schema';
import { authenticate } from '@core/middleware/authMiddleware';

// Crear el router
const router = Router();

/**
 * Resolver el controller desde el scope del request
 * Esto permite que cada request tenga su propia instancia de servicios scoped
 * @throws Error si el scope middleware no está configurado
 */
const get{{resourceNameUpper}}Controller = (req: Request): {{resourceNameUpper}}Controller => {
  if (!req.scope) {
    throw new Error('Scope middleware not configured. Please add scopeMiddleware to Express app.');
  }
  return req.scope.resolve<{{resourceNameUpper}}Controller>('{{resourceNameLower}}Controller');
};

/**
 * Definición de rutas para {{resourceNameUpper}}
 */

// Rutas que requieren autenticación
router.use(authenticate);

// GET /api/{{apiPath}} - Obtener elementos (con o sin paginación según parámetro 'page')
router.get('/', (req: Request, res: Response, next: NextFunction) => {
  const controller = get{{resourceNameUpper}}Controller(req);
  controller.get(req, res, next);
});

// GET /api/{{apiPath}}/:_id - Obtener un elemento por ID
router.get('/:_id', (req: Request, res: Response, next: NextFunction) => {
  const controller = get{{resourceNameUpper}}Controller(req);
  controller.findById(req, res, next);
});

// POST /api/{{apiPath}} - Crear un nuevo elemento
router.post(
  '/',
  validateZodSchema(Create{{resourceNameUpper}}Schema),
  (req: Request, res: Response, next: NextFunction) => {
    const controller = get{{resourceNameUpper}}Controller(req);
    controller.create(req, res, next);
  }
);

// PUT /api/{{apiPath}}/:_id - Actualizar un elemento
router.put(
  '/:_id',
  validateZodSchema(Update{{resourceNameUpper}}Schema),
  (req: Request, res: Response, next: NextFunction) => {
    const controller = get{{resourceNameUpper}}Controller(req);
    controller.update(req, res, next);
  }
);

// DELETE /api/{{apiPath}}/:_id - Eliminar un elemento
router.delete('/:_id', (req: Request, res: Response, next: NextFunction) => {
  const controller = get{{resourceNameUpper}}Controller(req);
  controller.delete(req, res, next);
});

// PATCH /api/{{apiPath}}/:_id/soft-delete - Eliminación lógica
router.patch('/:_id/soft-delete', (req: Request, res: Response, next: NextFunction) => {
  const controller = get{{resourceNameUpper}}Controller(req);
  controller.softDelete(req, res, next);
});

// PATCH /api/{{apiPath}}/:_id/restore - Restaurar elemento
router.patch('/:_id/restore', (req: Request, res: Response, next: NextFunction) => {
  const controller = get{{resourceNameUpper}}Controller(req);
  controller.restore(req, res, next);
});

export const {{resourceNameUpper}}Routes = router;